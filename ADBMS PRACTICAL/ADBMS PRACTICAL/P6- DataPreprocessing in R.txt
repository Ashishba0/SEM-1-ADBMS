1) PRINT HEAD OF MTCARS DATASET [PREDEFINED IN R]:
my_data<-mtcars
head(my_data,5)

2) READING DATA OF SPECIFIC ROWS & COLUMNS:
#my_data
my_data1 <- my_data[1:6,1:5]
my_data1

3) RENAME COLUMN NAME USING DPLYR:
install.packages("dplyr")
library(dplyr, warn.conflicts = FALSE)
my_data1 = dplyr::rename(my_data1, "horse_power" = "hp")
my_data1

4) ADDING NEW COLUMN:
## Adding new variable
my_data1$new_hp1 <- my_data1$horse_power * 0.5
colnames(my_data1)
my_data1

5) READING DATA FROM CSV FILE:
#Reading with read.table() assumes no headers by default. First few lines :
data2 = read.table(file="biostats.csv", sep = ",")
data2

6) READING DATA FROM SPECFIC COLUMNS OF CSV FILE:
#V1, V2, V3.. are given as default names (titles) by R
data2 = read.csv(file="biostats.csv", col.names=c("name","gender","age"))
data2

7) OPERATION WITH NA:
#Operation with NA
NA + 4

8) CREATE A VECTOR V WITH 1 NA VALUE:
#Create a vector V with 1 NA value
V <- c(1,2,NA,3)
V

9)FIND MEDIAN:
WITH NA:
#Median with NA
median(V)

#On removing NAs:
median(V, na.rm = T)

10) CHECK WHETHER IT IS NA OR NOT:
#Apply is.na() to vector
is.na(V)

11) REMOVING THE NA VALUES BY USING LOGICAL INDEXING:
#Removing the NA values by using logical indexing
naVals <- is.na(V)

12) Get values that are not NA:
V[!naVals]

13) SUBSETTING WITH COMPLETE CASES - VALUES THAT ARE NOT NA:
#Subsetting with complete cases - values that are not NA
V[complete.cases(V)]

14) SUBSETTING A DATA FRAME WITH COMPLETE CASES:
dataC <- read.csv(file ="biostats.csv", na.strings = "")
dataC

# Subset only the rows without NA
 dataCompleteCases <- dataC[complete.cases(dataC),]
dataCompleteCases

15) MEAN IMPUTATION & MEDIAN IMPUTATION:
install.packages('Hmisc')
library(Hmisc)

## create a vector
x = c(1,2,3,NA,4,4,NA)
x

# mean imputation - from package, mention name of function to be used
x <- impute(x, fun = mean)
x

#median imputation
x <- impute(x, fun = median)
x

16) CONVERT:
Convert Character into Factor(categorical data):

#Convert Character into Factor(categorical data)
#Create gender vector
gender_vector <- c("Male", "Female", "Female", "Male", "Male")
class(gender_vector)

#Convert gender_vector to a factor
factor_gender_vector <-factor(gender_vector)
class(factor_gender_vector)

17) CREATE ORDINAL CATEGORICAL VECTOR:
#Create Ordinal categorical vector
day_vector <- c('evening', 'morning', 'afternoon', 'midday', 'midnight', 'evening')
day_vector

18) CONVERT VECTOR INTO A FACTOR WITH ORDERED LEVEL:
#Convert `day_vector` to a factor with ordered level
factor_day <- factor(day_vector, order = TRUE, levels =c('morning', 'midday', 'afternoon', 'evening', 'midnight'))

#Print the new variable
factor_day

19) CREATE DATAFRAME FROM VECTOR:
# Creating vectors
age <- c(40, 49, 48, 40, 67, 52, 53)
salary <- c(103200, 106200, 150200, 10606, 10390, 14070, 10220)
gender <- c("male", "male", "transgender","female", "male", "female", "transgender")

# Creating data frame named employee
employee<- data.frame(age, salary, gender)
employee

20) CREATE FACTOR WITH LABELS:
# Creating a factor corresponding to age with labels
wfact = cut(employee$age, 3, labels=c('Young', 'Medium', 'Aged'))
table(wfact)
